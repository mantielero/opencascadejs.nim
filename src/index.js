/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_671088802 = [0];
//import initOpenCascade from "opencascade.js";
import initOpenCascade from "./opencascade.full.js";
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.module.js';
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

const makePolygon = (openCascade) => {
  const builder = new openCascade.BRep_Builder();
  const aComp = new openCascade.TopoDS_Compound();
  builder.MakeCompound(aComp);
  const path = [[-50, 0, 0], [50, 0, 0], [50, 100, 0]].map(([x, y, z]) => new openCascade.gp_Pnt_3(x, y, z));
  const makePolygon = new openCascade.BRepBuilderAPI_MakePolygon_3(path[0], path[1], path[2], true);
  const wire = makePolygon.Wire();
  const f = new openCascade.BRepBuilderAPI_MakeFace_15(wire, false);
  builder.Add(aComp, f.Shape());
  return aComp;
}


function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557575(x_33557576, y_33557577) {
  var result_33557578 = 0.0;

    result_33557578 = (toFloat_33556001(x_33557576) / toFloat_33556001(y_33557577));

  return result_33557578;

}

function setupThreeJSViewport_989855748() {
    
function animate_989855937(time_989855938) {
        var _ = window.requestAnimationFrame(animate_989855937);
        renderer_989855764.render((scene_989855750), (camera_989855757));

      
    }

  var result_989855749 = null;

  BeforeRet: do {
    var scene_989855750 = new THREE.Scene();
    var camera_989855757 = new THREE.PerspectiveCamera(75.0, HEX2F_33557575((window.innerWidth || document.documentElement.clientWidth), (window.innerHeight || document.documentElement.clientHeight)), 0.1, 1000.0);
    var antialias_989855758 = {};
    antialias_989855758["antialias"] = true;
    var renderer_989855764 = new THREE.WebGLRenderer(antialias_989855758);
    var viewport_989855765 = document.getElementById("viewport");
    var viewportRect_989855766 = viewport_989855765.getBoundingClientRect();
    renderer_989855764.setSize((viewportRect_989855766.width), (viewportRect_989855766.height));
    viewport_989855765.appendChild(renderer_989855764.domElement);
    var light_989855802 = new THREE.AmbientLight(4210752, 1);
    scene_989855750.add((light_989855802));
    var directionalLight_989855818 = new THREE.DirectionalLight(16777215, 0.5);
    directionalLight_989855818.position.set((0.5), (0.5), (0.5));
    scene_989855750.add((directionalLight_989855818));
    camera_989855757.position.set((0), (50), (100));
    var controls_989855892 = new OrbitControls(camera_989855757, renderer_989855764.domElement);
    controls_989855892.screenSpacePanning = true;
    controls_989855892.target.set((0), (50), (0));
    controls_989855892.update();
    animate_989855937(0.0);
    result_989855749 = scene_989855750;
    break BeforeRet;
  } while (false);

  return result_989855749;

}

function then_469762112(future_469762115, onSuccess_469762116, onReject_469762117) {
  var result_469762118 = null;

  BeforeRet: do {
    var ret_469762148 = null;
    ret_469762148 = future_469762115.then(onSuccess_469762116, onReject_469762117)
    result_469762118 = ret_469762148;
    break BeforeRet;
  } while (false);

  return result_469762118;

}
async function HEX3Aanonymous_469762090(opencascade_469762091) {
  var result_469762093 = null;

  BeforeRet: do {
    (await opencascade_469762091.addShapeToScene(opencascade_469762091.makePolygon(), scene_469762087));
    result_469762093 = undefined;
    break BeforeRet;
  } while (false);

  return result_469762093;

}
var scene_469762087 = setupThreeJSViewport_989855748();
var _ = then_469762112(initOpenCascade(), HEX3Aanonymous_469762090, null);
